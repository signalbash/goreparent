% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_go_parents.R
\name{make_descriptive_parent}
\alias{make_descriptive_parent}
\title{Make a more descriptive name for groups of go_ids}
\usage{
make_descriptive_parent(
  go_results,
  group_col = "parent_description",
  group_go_id_col = "parent_id",
  n_top = NA,
  use_stepchild_ratio = TRUE,
  pretest = TRUE,
  replace_group_col = TRUE,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{go_results}{data.frame with two go terms and their corresponding group}

\item{group_col}{which column contains the grouping variable for go terms. default \code{"parent_description"}}

\item{group_go_id_col}{which column contains the grouping variable formatted as a parent GO ID for go terms. default \code{"parent_id"}
Not required to match a column, but allows pretest filtering if used correctly.}

\item{n_top}{number of groups to add descriptive parents to.
This cuts down on processing time and only annotates the groups with the n-th highest minimum FDR.
default = \code{NA}. If set to NA, will run on all groups, unless pre-testing is applicable.}

\item{use_stepchild_ratio}{use the true stepchild ratio, not the stepchild:total children ratio.
default \code{TRUE}
Please do not turn off unless debugging.}

\item{pretest}{pre-test groups of GO ids for high relatedness. default \code{TRUE}
This can cut down on processing time, and for currently tested data, should not accidentally exclude any groups,
but allows some groups to be tested for which there is not a better descriptive parent than the current term.}

\item{replace_group_col}{replace the data in the \code{group_col} with the original id and the new description in brackets?
if FALSE, will add an additional column to the output, named after the \code{group_col} with "new_" as a prefix. i.e. "new_parent_description"
default \code{TRUE}}

\item{verbose}{display progress messages? default \code{FALSE}}

\item{...}{arguments to be passed to \code{get_top_level_goterms} if pretest is \code{TRUE}}
}
\description{
Uses stepparent/children (i.e. once removed related offspring terms) to
redefine parent groups to include semi-related terms and therefore increase
the specificity of the descriptive parent.
}
\examples{

go_results = add_go_parents(data.frame(GOIDS = c("GO:0048167", "GO:0061001",
"GO:0060291" ,"GO:0050803" ,"GO:0051963", "GO:0050807", "GO:0051965")))
make_descriptive_parent(go_results)
go_results = add_go_parents(data.frame(FDR=c(rep(0.001,5), rep(0.005, 7)),
ID = c("GO:0070997", "GO:1901214", "GO:0051402", "GO:0043523", "GO:1901215",
"GO:0048167", "GO:0061001", "GO:0060291" ,"GO:0050803" ,"GO:0051963",
"GO:0050807", "GO:0051965")))
make_descriptive_parent(go_results, n_top=1, verbose=TRUE)
make_descriptive_parent(go_results, verbose=TRUE, replace_group_col=FALSE)
}
